# -*- coding: utf-8 -*-
"""TF-IDF-SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HJQJR8ZlFSeSPqHmuz1gwT83Wu5N02B4
"""

import nltk
nltk.download('stopwords')
# importing pandas package
import pandas as pd
import re
import math as ma
import numpy as np
from nltk.corpus import stopwords
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn import svm
from sys import getsizeof


data = pd.read_csv("com.csv" , error_bad_lines=False )

stopwords_list = stopwords.words('arabic')

les_mot = []
matrix = []
ligne_mot = []
ligne_mots = []
nb_occurence = 0
target = np.zeros((len(data)) , dtype='i')

for i , commantaire in data.iterrows() :

    chaine_caractere = commantaire.to_string()
    if "pos" in chaine_caractere:
        target[i] = 1
    mots_Commentaire = re.findall(r'[أ-ي]+', chaine_caractere)
    mots_no_stop = []
    for mo in mots_Commentaire:
        if mo not in  stopwords_list  and mo not in  les_mot :
            les_mot.append(mo)

print("le nombre de commentaire est " , i )
print( "la languere du tableau est :", len(target))
print("le nombre du mot est " , len(les_mot) )

for mot in les_mot:
    ligne_mot.append(mot)

matrix.append(ligne_mot)





test_idf = np.zeros((len(matrix[0])) , dtype='f')


for  i, commantaire in data.iterrows():
    chaine_caractere = commantaire.to_string()
    mots_Commentaire  = re.findall( r'[أ-ي]+', chaine_caractere)
    ligne_mots = []
    for Mot_Matrice in matrix[0]:
        nb_occurence = 0
        for mot in mots_Commentaire:
            if mot == Mot_Matrice:
                nb_occurence +=1
        if nb_occurence != 0:
          test_idf[matrix[0].index(Mot_Matrice)] += 1
        ligne_mots.append(nb_occurence/len(mots_Commentaire))

    matrix.append(ligne_mots)


print("la phase de tf est terminée")



vecteur_idf = []
nb_commentaire = len(data)

for j in range(len(test_idf)):
    vecteur_idf.append(ma.log10(nb_commentaire / test_idf[j]))


print("la phase de idf est terminée")

nb_colonne  = len(matrix[0])
for j in range(i+1):
  for z in range(nb_colonne):
        matrix[j + 1][z] =  vecteur_idf[z] * matrix[j+1][z]


#*****************************************************************************************
#************************ Coté de Machien Learning ***************************************
#*****************************************************************************************


print("on a commencé la partie d'apprentissge automatique Monsieur Walid ")

del les_mot
del ligne_mot
del ligne_mots
del vecteur_idf
del test_idf


del matrix[0]



data_test = train_test_split(matrix, target
                                 , random_state=0
                                 , train_size=0.75)

data_train, data_test, target_train, target_test = data_test


clf = svm.SVC()

clf.fit(data_train, target_train)


result = clf.predict(data_test)

print(accuracy_score(result, target_test))



